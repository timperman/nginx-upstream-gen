{{ $nginxContainer := where $ "Name" (coalesce .Env.NGINX_CONTAINER_NAME "nginx") | first }}

{{ define "server" }}
	{{ if .Address }}
		{{/* If we got the containers from swarm and this container's port is published to host, use host IP:PORT */}}
		{{ if and .Container.Node.ID .Address.HostPort }}
			# {{ .Container.Node.Name }}/{{ .Container.Name }}
			server {{ .Container.Node.Address.IP }}:{{ .Address.HostPort }};
		{{/* If there is no swarm node or the port is not published on host, use container's IP:PORT */}}
		{{ else if .Network }}
			# {{ .Container.Name }}
			server {{ .Network.IP }}:{{ .Address.Port }};
		{{ end }}
	{{ else if .Network }}
		# {{ .Container.Name }}
		server {{ .Network.IP }} down;
	{{ end }}
{{ end }}

{{ range $label, $containers := groupByLabel $ "com.github.timperman.usgen.name" }}
upstream {{ $label }} {
  {{ range $container := $containers }}
    ## {{ $container.Name }}
  	{{ $addrLen := len $container.Addresses }}
    {{/* If only 1 port exposed, use that */}}
		{{ if eq $addrLen 1 }}
			{{ $address := index $container.Addresses 0 }}
			{{ template "server" (dict "Container" $container "Address" $address "Network" $containerNetwork) }}
		{{/* If more than one port exposed, use the one matching LABEL "com.github.timperman.usgen.port", falling back to standard web port 80 */}}
		{{ else }}
			{{ $port := "80" | or (index $container.Labels "com.github.timperman.usgen.port") }}
			{{ $address := where $container.Addresses "Port" $port | first }}
			{{ template "server" (dict "Container" $container "Address" $address "Network" $containerNetwork) }}
		{{ end }}
  {{ end }}
}
{{ end }}

{{ $requiredUpstreams := split $.Env.REQUIRED_UPSTREAMS "," }}
{{ range $requiredUpstream := $requiredUpstreams }}
  {{ if (eq 0 (len (whereLabelValueMatches $ "com.github.timperman.usgen.name" $requiredUpstream))) }}
upstream {{ $requiredUpstream }} {
  server {{ $.Env.DEFAULT_BACKEND }};
}
  {{ end }}
{{ end }}
